━━━━━━━━━━━━━━━━━━━━
저장시간: 2021-04-27 오후 3:06:28 화요일
━━━━━━━━━━━━━━━━━━━━
//━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
// 4월 27일 화요일 (9주 1일)
// 
// container, algorithm, 그리고 이 둘을 연결하는 iterator
// 
// 반복자 : 책 31 ~ 41, 123 ~ 136, Design Pattern 중 iterator pattern
//  반복자는 포인터를 추상화한 것이다.
//  반복자처럼 행동하는 것은 반복자이다.
//  반복자는 container가 제공하는 인터페이스이다.
//━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

#include <vector>
#include <iterator>
#include "pch.h"
#include "save.h"
#include "String.h"

// [문제] String이 반복자를 리턴한다.
// sort() 가 문제없이 실행되도록 반복자에게 필요한 함수들을 오버로딩하라

template<typename iter>
void showIteratorCategory(const iter&)
{
	std::cout << typeid(std::iterator_traits<iter>::iterator_category).name() << std::endl;
}

int main()
{
	String s{ "1357924680" };

	std::ostream_iterator<char> outIter{ std::cout };

	outIter = 'c';
	outIter = '+';
	outIter = '+';

	//for (auto i{ s.rbegin() }, i != s.rend(), ++i)
	//{
	//	std::cout << *i << " ";
	//}

	//std::cout << std::endl;

	Save("main.cpp");
}

━━━━━━━━━━━━━━━━━━━━
저장시간: 2021-04-27 오후 3:18:30 화요일
━━━━━━━━━━━━━━━━━━━━
//━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
// 4월 27일 화요일 (9주 1일)
// 
// container, algorithm, 그리고 이 둘을 연결하는 iterator
// 
// 반복자 : 책 31 ~ 41, 123 ~ 136, Design Pattern 중 iterator pattern
//  반복자는 포인터를 추상화한 것이다.
//  반복자처럼 행동하는 것은 반복자이다.
//  반복자는 container가 제공하는 인터페이스이다.
//━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

#include <vector>
#include <iterator>
#include "pch.h"
#include "save.h"
#include "String.h"

// [문제] String이 반복자를 리턴한다.
// sort() 가 문제없이 실행되도록 반복자에게 필요한 함수들을 오버로딩하라

template<typename iter>
void showIteratorCategory(const iter&)
{
	std::cout << typeid(std::iterator_traits<iter>::iterator_category).name() << std::endl;
}

int main()
{
	String s{ "1357924680" };

	for (auto i{ s.rbegin() }; i != s.rend(); ++i)
	{
		std::cout << *i << " ";
	}

	std::cout << std::endl;

	Save("main.cpp");
	Save("String.h");
}

━━━━━━━━━━━━━━━━━━━━
저장시간: 2021-04-27 오후 3:18:30 화요일
━━━━━━━━━━━━━━━━━━━━
//-----------------------------------------------------------------------------
// String.h - STL 내부 동작을 관찰하기 위해 만든 자원을 확보하는 클래스
//
// 2021. 3. 30									Programmed by wulong
//-----------------------------------------------------------------------------
#pragma once

#include <random>
#include <string>
#include "pch.h"

//#define 관찰			// 이 주석을 풀면 special member의 동작을 알 수 있다.

// 2021. 4. 20
// String이 외부에 제공하는 반복자
class String_iterator
{
public:
	String_iterator(char* p) : p{ p } {}
public:
	//int operator+(const String_iterator& right) const { return right.p + p; }
	int operator-(const String_iterator& right) const { return right.p - p; }
public:
	String_iterator& operator++() { ++p; return *this; }
	String_iterator& operator--() { --p; return *this; }
public:
	bool operator==(const String_iterator& right) const { return right.p == p; }
	bool operator!=(const String_iterator& right) const { return right.p != p; }
public:
	bool operator<(const String_iterator& right) { return p < right.p; }
protected:
	char* p{ nullptr };
};

// 2021. 4. 27
// 역방향 반복자 추가
class String_reverse_iterator
{
public:
	String_reverse_iterator(char* p) : p{ p } {}
public:
	String_reverse_iterator& operator++() { --p; return *this; }
public:
	bool operator!=(const String_reverse_iterator & right) const { return right.p != p; }
public:
	char& operator*() { return *(p - 1); }
private:
	char* p{ nullptr };
};

class String
{
private:
	// 2021. 4. 20
	using iterator = String_iterator;
	using value_type = char;
	// 2021. 4. 27
	using reverse_iterator = String_reverse_iterator;
public:
	String();
	String(size_t n);
	String(const char* str);
	~String();
public:
	String(const String& other);							// 복사생성자
	String& operator=(const String& other);					// 복사할당연산자
	
	String(String&& other) noexcept;						// 이동생성자
	String& operator=(String&& other)noexcept;				// 이동할당연산자
public:
	// 2021. 4. 20
	iterator begin() { return iterator{ p }; }
	iterator end() { return iterator{ p + num }; }
public:
	// 2021 4. 27
	iterator cbegin() const { return iterator{ p }; }
	iterator cend() const { return iterator{ p + num }; }
public:
	// 2021. 4. 27
	reverse_iterator rbegin() { return reverse_iterator{ p + num }; }
	reverse_iterator rend() { return reverse_iterator{ p }; }
public:
	size_t size() const { return num; }

	// 확보한 자원을 std::string처럼 이용할 수 있게 하자
	std::string GetString() const;
private:
	size_t num;												// 확보한 자원의 수
	char* p;												// 확보한 자원의 위치
private:
	friend std::ostream& operator<<(std::ostream&, const String&);
};


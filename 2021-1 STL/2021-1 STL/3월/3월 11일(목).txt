━━━━━━━━━━━━━━━━━━━━
저장시간: 2021-03-11 오후 1:48:32 목요일
━━━━━━━━━━━━━━━━━━━━
//━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
// 3월 11일 목요일 (2주 2일)
// 
// 많은 수의 데이터 다루기 - int에서 시작
// 갯수를 늘리며 자료가 저장되는 방식과 공간을 이해한다.
// 많은 수의 자료를 저장하는 방식을 알아본다
// 
// sort() 설명 다시 - 삼수의 역할/비교횟수 등을 살펴보자
// 객체를 많이 만들어 반복
// 
// 알고리즘 시간재기
// 스마트 포인터
// 
// 앞으로 사용할 class 만들어 두기
//━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

#include "pch.h"
#include "save.h"

// [문제] 파일 "int 100개.txt"에 바이너리롤 저장되어있는 정수 100개가 있다
// 읽은 int 100개를 내림차순으로 정렬한 후 출력하라

using namespace std::literals::string_literals;

int main()
{
	std::ifstream in{ "int 100개.txt"s, std::ios::binary };

	if (!in)
	{
		exit(0);
	}

	int num[100]{};

	in.read((char*)num, 100 * sizeof(int));
	std::sort(std::begin(num), std::end(num), [](int a, int b)
		{
			return a > b;
		}
	);

	for (int i : num)
	{
		std::cout << i << "\t";
	}

	std::cout << std::endl;

	Save("main.cpp");
}

━━━━━━━━━━━━━━━━━━━━
저장시간: 2021-03-11 오후 2:14:34 목요일
━━━━━━━━━━━━━━━━━━━━
//━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
// 3월 11일 목요일 (2주 2일)
// 
// 많은 수의 데이터 다루기 - int에서 시작
// 갯수를 늘리며 자료가 저장되는 방식과 공간을 이해한다.
// 많은 수의 자료를 저장하는 방식을 알아본다
// 
// sort() 설명 다시 - 삼수의 역할/비교횟수 등을 살펴보자
// 객체를 많이 만들어 반복
// 
// 알고리즘 시간재기
// 스마트 포인터
// 
// 앞으로 사용할 class 만들어 두기
//━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

#include "pch.h"
#include "save.h"

// [문제] 사용자가 원하는 갯수 num만큼 int를 저장할 공간을 확보한다
// 이 공간을 1부터 num까지 숫자로 채워라
// 처음과 마지막 값을 화면에 출력하라

int main()
{
	std::cout << "몇 개의 int를 원하나요? ";
	int num;
	std::cin >> num;

	int* arr = new int[num];

	for (int i = 0; i < num; ++i)
	{
		// arr[i] = i + 1;
		*(arr + i) = i + 1;
	}

	std::cout << "처음 : " << *arr << std::endl;
	std::cout << "마지막 : " << *(arr + num - 1) << std::endl;

	delete[] arr;

	Save("main.cpp");
}

━━━━━━━━━━━━━━━━━━━━
저장시간: 2021-03-11 오후 2:23:52 목요일
━━━━━━━━━━━━━━━━━━━━
//━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
// 3월 11일 목요일 (2주 2일)
// 
// 많은 수의 데이터 다루기 - int에서 시작
// 갯수를 늘리며 자료가 저장되는 방식과 공간을 이해한다.
// 많은 수의 자료를 저장하는 방식을 알아본다
// 
// sort() 설명 다시 - 삼수의 역할/비교횟수 등을 살펴보자
// 객체를 많이 만들어 반복
// 
// 알고리즘 시간재기
// 스마트 포인터
// 
// 앞으로 사용할 class 만들어 두기
//━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

#include "pch.h"
#include "save.h"

// [문제] 사용자가 원하는 갯수 num만큼 int를 저장할 공간을 확보한다
// 이 공간을 1부터 num까지 숫자로 채워라
// 처음과 마지막 값을 화면에 출력하라

int main()
{
	std::cout << "몇 개의 int를 원하나요? ";
	int num;
	std::cin >> num;

	int* arr;

	try
	{
		arr = new int[num];
	}
	catch (std::exception& e)
	{
		std::cout << e.what() << std::endl;
	}

	for (int i = 0; i < num; ++i)
	{
		// arr[i] = i + 1;
		*(arr + i) = i + 1;
	}

	std::cout << "처음 : " << *arr << std::endl;
	std::cout << "마지막 : " << *(arr + num - 1) << std::endl;

	delete[] arr;

	Save("main.cpp");
}

━━━━━━━━━━━━━━━━━━━━
저장시간: 2021-03-11 오후 2:40:37 목요일
━━━━━━━━━━━━━━━━━━━━
//━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
// 3월 11일 목요일 (2주 2일)
// 
// 많은 수의 데이터 다루기 - int에서 시작
// 갯수를 늘리며 자료가 저장되는 방식과 공간을 이해한다.
// 많은 수의 자료를 저장하는 방식을 알아본다
// 
// sort() 설명 다시 - 삼수의 역할/비교횟수 등을 살펴보자
// 객체를 많이 만들어 반복
// 
// 알고리즘 시간재기
// 스마트 포인터
// 
// 앞으로 사용할 class 만들어 두기
//━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

#include "pch.h"
#include "save.h"

// [문제] 시스템이 메모리를 줄 수 있을 때까지 메모리를 조금씩 요청해본다
// 메모리를 해제하지 않고 500MB를 계속 요청하자
// 작업관리자에서 메모리 사용량을 확인하자

int main()
{
	Save("main.cpp");
	
	int count{};

	while (true)
	{
		char* p = new char[500000000];

		std::cout << ++count << "할당 성공" << std::endl;
	}
}

━━━━━━━━━━━━━━━━━━━━
저장시간: 2021-03-11 오후 2:46:30 목요일
━━━━━━━━━━━━━━━━━━━━
//━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
// 3월 11일 목요일 (2주 2일)
// 
// 많은 수의 데이터 다루기 - int에서 시작
// 갯수를 늘리며 자료가 저장되는 방식과 공간을 이해한다.
// 많은 수의 자료를 저장하는 방식을 알아본다
// 
// sort() 설명 다시 - 삼수의 역할/비교횟수 등을 살펴보자
// 객체를 많이 만들어 반복
// 
// 알고리즘 시간재기
// 스마트 포인터
// 
// 앞으로 사용할 class 만들어 두기
//━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

#include "pch.h"
#include "save.h"
#include <thread>

// [문제] 시스템이 메모리를 줄 수 있을 때까지 메모리를 3초에 한 번씩 요청해본다
// 메모리를 해제하지 않고 500MB를 계속 요청하자
// 작업관리자에서 메모리 사용량을 확인하자

int main()
{
	Save("main.cpp");
	
	int count{};

	while (true)
	{
		char* p = new char[300000000];

		std::cout << ++count << "할당 성공" << std::endl;

		using namespace std::chrono_literals;
		std::this_thread::sleep_for(3s);
	}
}

━━━━━━━━━━━━━━━━━━━━
저장시간: 2021-03-11 오후 2:59:22 목요일
━━━━━━━━━━━━━━━━━━━━
//━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
// 3월 11일 목요일 (2주 2일)
// 
// 많은 수의 데이터 다루기 - int에서 시작
// 갯수를 늘리며 자료가 저장되는 방식과 공간을 이해한다.
// 많은 수의 자료를 저장하는 방식을 알아본다
// 
// sort() 설명 다시 - 삼수의 역할/비교횟수 등을 살펴보자
// 객체를 많이 만들어 반복
// 
// 알고리즘 시간재기
// 스마트 포인터
// 
// 앞으로 사용할 class 만들어 두기
//━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

#include "pch.h"
#include "save.h"

// [문제] 시스템이 메모리를 줄 수 있을 때까지 메모리를 3초에 한 번씩 요청해본다
// 메모리를 해제하지 않고 500MB를 계속 요청하자
// 작업관리자에서 메모리 사용량을 확인하자'

// c++ core guidelines - raw pointer를 사용하지 말 것
// 대신 smart pointer를 사용할 것

int main()
{
	Save("main.cpp");

	int count{};

	while (true)
	{
		std::unique_ptr<char> p{ new char[500000000] };

		std::cout << ++count << "\r";
	}
}

━━━━━━━━━━━━━━━━━━━━
저장시간: 2021-03-11 오후 2:59:59 목요일
━━━━━━━━━━━━━━━━━━━━
//━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
// 3월 11일 목요일 (2주 2일)
// 
// 많은 수의 데이터 다루기 - int에서 시작
// 갯수를 늘리며 자료가 저장되는 방식과 공간을 이해한다.
// 많은 수의 자료를 저장하는 방식을 알아본다
// 
// sort() 설명 다시 - 삼수의 역할/비교횟수 등을 살펴보자
// 객체를 많이 만들어 반복
// 
// 알고리즘 시간재기
// 스마트 포인터
// 
// 앞으로 사용할 class 만들어 두기
//━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

#include "pch.h"
#include "save.h"

// [문제] 시스템이 메모리를 줄 수 있을 때까지 메모리를 3초에 한 번씩 요청해본다
// 메모리를 해제하지 않고 500MB를 계속 요청하자
// 작업관리자에서 메모리 사용량을 확인하자'

// c++ core guidelines - raw pointer를 사용하지 말 것
// 대신 smart pointer를 사용할 것

int main()
{
	Save("main.cpp");

	int count{};

	while (true)
	{
		std::unique_ptr<char[]> p{ new char[500000000] };

		std::cout << p[0] << std::endl;
		std::cout << ++count << "\r";
	}
}

━━━━━━━━━━━━━━━━━━━━
저장시간: 2021-03-11 오후 3:18:20 목요일
━━━━━━━━━━━━━━━━━━━━
//━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
// 3월 11일 목요일 (2주 2일)
// 
// 많은 수의 데이터 다루기 - int에서 시작
// 갯수를 늘리며 자료가 저장되는 방식과 공간을 이해한다.
// 많은 수의 자료를 저장하는 방식을 알아본다
// 
// sort() 설명 다시 - 삼수의 역할/비교횟수 등을 살펴보자
// 객체를 많이 만들어 반복
// 
// 알고리즘 시간재기
// 스마트 포인터
// 
// 앞으로 사용할 class 만들어 두기
//━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

#include "pch.h"
#include "save.h"
#include <thread>
#include <chrono>

// [문제] 

int main()
{
	using namespace std::chrono_literals;

	// 스톱워치 시작
	//std::chrono::steady_clock::timepoint begin = std::chrono::steady_clock::now();
	auto begin = std::chrono::steady_clock::now();
	std::this_thread::sleep_for(100ms);

	// 스톱워치 끝
	auto end = std::chrono::steady_clock::now();

	auto duration = end - begin;

	std::cout << "경과 시간(밀리초) : " << std::chrono::duration_cast<std::chrono::milliseconds>(duration).count() << std::endl;
	Save("main.cpp");
}

━━━━━━━━━━━━━━━━━━━━
저장시간: 2021-03-11 오후 3:20:45 목요일
━━━━━━━━━━━━━━━━━━━━
//━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
// 3월 11일 목요일 (2주 2일)
// 
// 많은 수의 데이터 다루기 - int에서 시작
// 갯수를 늘리며 자료가 저장되는 방식과 공간을 이해한다.
// 많은 수의 자료를 저장하는 방식을 알아본다
// 
// sort() 설명 다시 - 삼수의 역할/비교횟수 등을 살펴보자
// 객체를 많이 만들어 반복
// 
// 알고리즘 시간재기
// 스마트 포인터
// 
// 앞으로 사용할 class 만들어 두기
//━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

#include "pch.h"
#include "save.h"
#include <thread>
#include <chrono>

// [문제] 

int main()
{
	using namespace std::chrono;
	using namespace std::chrono_literals;

	// 스톱워치 시작
	//steady_clock::timepoint begin = steady_clock::now();
	auto begin = steady_clock::now();
	std::this_thread::sleep_for(333ms);

	// 스톱워치 끝

	std::cout << "경과 시간(밀리초) : " << duration_cast<milliseconds>(steady_clock::now() - begin).count() << std::endl;
	Save("main.cpp");
}

